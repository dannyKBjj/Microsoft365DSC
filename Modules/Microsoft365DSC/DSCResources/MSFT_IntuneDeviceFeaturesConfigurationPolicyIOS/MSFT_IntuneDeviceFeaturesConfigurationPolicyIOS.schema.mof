[ClassVersion("1.0.0.0")]
class MSFT_DeviceManagementConfigurationPolicyAssignments
{
    [Write, Description("The type of the target assignment."), ValueMap{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}, Values{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}] String dataType;
    [Write, Description("The type of filter of the target assignment i.e. Exclude or Include. Possible values are:none, include, exclude."), ValueMap{"none","include","exclude"}, Values{"none","include","exclude"}] String deviceAndAppManagementAssignmentFilterType;
    [Write, Description("The Id of the filter for the target assignment.")] String deviceAndAppManagementAssignmentFilterId;
    [Write, Description("The group Id that is the target of the assignment.")] String groupId;
    [Write, Description("The group Display Name that is the target of the assignment.")] String groupDisplayName;
    [Write, Description("The collection Id that is the target of the assignment.(ConfigMgr)")] String collectionId;
};
[ClassVersion("1.0.0.0")]
class MSFT_airPrintDestination
{
    [Write, Description("The IP Address of the AirPrint destination.")] String ipAddress;
    [Write, Description("The Resource Path associated with the printer. This corresponds to the rp parameter of the _ipps.tcp Bonjour record. For example: printers/Canon_MG5300_series, printers/Xerox_Phaser_7600, ipp/print, Epson_IPP_Printer.")] String resourcePath;
    [Write, Description("The listening port of the AirPrint destination. If this key is not specified, AirPrint will use the default port. Available in iOS 11.0 and later.")] uint32 port;
    [Write, Description("If true, AirPrint connections are secured by Transport Layer Security (TLS). Default is false. Available in iOS 11.0 and later.")] Boolean forceTls;
};
[ClassVersion("1.0.0.0")]
class MSFT_iosWebContentFilterBase
{
    [Write, Description("url.")] String url[];
    [Write, Description("bookmarkFolder.")] String bookmarkFolder[];
    [Write, Description("displayName.")] String displayName[];
};
[ClassVersion("1.0.0.0")]
class MSFT_iosWebContentFilterSpecificWebsitesAccess 
{
    [Write, Description("specificWebsitesOnly, embedded instance of iosWebContentFilterBase."), EmbeddedInstance("MSFT_iosWebContentFilterBase")] String specificWebsitesOnly[];
    [Write, Description("websiteList, embedded instance of iosWebContentFilterBase."), EmbeddedInstance("MSFT_iosWebContentFilterBase")] String websiteList[];
};
[ClassVersion("1.0.0.0")]
class MSFT_iosHomeScreenApp
{
    [Write, Description("Name of the app. Inherited from iosHomeScreenItem.")] String displayName;
    [Write, Description("BundleID of the app if isWebClip is false or the URL of a web clip if isWebClip is true.")] String bundleID;
    [Write, Description("Is it a website URL or an app")] Boolean isWebClip;
};
[ClassVersion("1.0.0.0")]
class MSFT_iosHomeScreenItem
{
    [Write, Description("A list of apps, folders, and web clips to appear on a page. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_iosHomeScreenApp")] String icons[];
};
[ClassVersion("1.0.0.0")]
class MSFT_iosNotificationSettings
{
    [Key, Description("Bundle id of the app to which to apply these notification settings.")] String bundleID;
    [Write, Description("Application name to be associated with the BundleID.")] String appName;
    [Write, Description("Publisher to be associated with the BundleID.")] String publisher;
    [Write, Description("Indicates whether notifications are allowed for this app.")] Boolean enabled;
    [Write, Description("Indicates whether notifications can be shown in the notification center.")] Boolean showInNotificationCenter;
    [Write, Description("Indicates whether notifications can be shown on the lock screen.")] Boolean showOnLockScreen;
    [Write, Description("Indicates the type of alert for notifications for this app. Possible values are: deviceDefault, banner, modal, none."), ValueMap{"deviceDefault", "banner", "modal", "none"}, Values{"deviceDefault", "banner", "modal", "none"}] String alertType;
    [Write, Description("Indicates whether badges are allowed for this app.")] Boolean badgesEnabled;
    [Write, Description("Indicates whether sounds are allowed for this app.")] Boolean soundsEnabled;
    [Write, Description("Overrides the notification preview policy set by the user on an iOS device. Possible values are: notConfigured, alwaysShow, hideWhenLocked, neverShow."), ValueMap{"notConfigured", "alwaysShow", "hideWhenLocked", "neverShow"}, Values{"notConfigured", "alwaysShow", "hideWhenLocked", "neverShow"}] String previewVisibility;
};
[ClassVersion("1.0.0.0")]
class MSFT_appListItem
{
    [Write, Description("The application name.")] String name;
    [Write, Description("The publisher of the application.")] String publisher;
    [Write, Description("The Store URL of the application.")] String appStoreUrl;
    [Write, Description("The application or bundle identifier of the application.")] String appId;
};
[ClassVersion("1.0.0.0")]
class MSFT_iosSingleSignOnSettings
{
    [Write, Description("List of app identifiers that are allowed to use this login. If this field is omitted, the login applies to all applications on the device. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_appListItem")] String allowedAppsList[];
    [Write, Description("List of HTTP URLs that must be matched in order to use this login. With iOS 9.0 or later, wildcard characters may be used.")] String allowedUrls[];
    [Write, Description("The display name of login settings shown on the receiving device.")] String displayName;
    [Write, Description("A Kerberos principal name. If not provided, the user is prompted for one during profile installation.")] String kerberosPrincipalName;
    [Write, Description("A Kerberos realm name. Case sensitive.")] String kerberosRealm;
};
[ClassVersion("1.0.0.0")]
class MSFT_mimeContent
{
    [Write, Description("Indicates the content mime type.")] String type;
    [Write, Description("The byte array that contains the actual content.")] String value[];
};
class MSFT_keyStringValuePair
{
    [Write, Description("Key for the custom data entry.")] String key;
    [Write, Description("Value for the custom data entry.")] String value;
};

[ClassVersion("1.0.0.0")]
class MSFT_iosSingleSignOnExtension 
{
    [Write, Description("Enables/disables shared device mode.")] Boolean enableSharedDeviceMode;
    [Write, Description("Simple string array.")] String bundleIdAccessControlList[];
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_keyStringValuePair")] String configurations[];
};

[ClassVersion("1.0.0.0"), FriendlyName("IntuneDeviceFeaturesConfigurationPolicyIOS")]
class MSFT_IntuneDeviceFeaturesConfigurationPolicyIOS : OMI_BaseResource
{
    [Write, Description("Id of the Intune policy.")] String Id;
    [Key, Description("Display name of the Intune policy.")] String DisplayName;
    [Write, Description("Description of the Intune policy.")] String Description;
    [Write, Description("Represents the assignment to the Intune policy."), EmbeddedInstance("MSFT_DeviceManagementConfigurationPolicyAssignments")] String Assignments[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Intune Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
    [Write, Description("Access token used for authentication.")] String AccessTokens[];
    [Write, Description("An array of AirPrint printers that should always be shown."), EmbeddedInstance("MSFT_airPrintDestination")] String airPrintDestinations[];
    [Write, Description("Asset tag information for the device, displayed on the login window and lock screen.")] String assetTagTemplate;
    [Write, Description("Gets or sets iOS Web Content Filter settings, supervised mode only."), EmbeddedInstance("MSFT_iosWebContentFilterSpecificWebsitesAccess")] String contentFilterSettings[];
    [Write, Description("A footnote displayed on the login window and lock screen. Available in iOS 9.3.1 and later.")] String lockScreenFootnote;
    [Write, Description("A list of app and folders to appear on the Home Screen Dock. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_iosHomeScreenApp")] String homeScreenDockIcons[];
    [Write, Description("A list of pages on the Home Screen. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_iosHomeScreenItem")] String homeScreenPages[];  
    [Write, Description("Gets or sets the number of columns to render when configuring iOS home screen layout settings. If this value is configured, homeScreenGridHeight must be configured as well.")] Int32 homeScreenGridWidth;
    [Write, Description("Gets or sets the number of rows to render when configuring iOS home screen layout settings. If this value is configured, homeScreenGridWidth must be configured as well.")] Int32 homeScreenGridHeight;
    [Write, Description("Notification settings for each bundle id. Applicable to devices in supervised mode only (iOS 9.3 and later)."), EmbeddedInstance("MSFT_iosNotificationSettings")] String notificationSettings[];
    [Write, Description("The Kerberos login settings that enable apps on receiving devices to authenticate smoothly."), EmbeddedInstance("MSFT_iosSingleSignOnSettings")] String singleSignOnSettings;  
    [Write, Description("A wallpaper display location specifier. Possible values are: notConfigured, lockScreen, homeScreen, lockAndHomeScreens."), ValueMap{"notConfigured", "lockScreen", "homeScreen", "lockAndHomeScreens"}, Values{"notConfigured", "lockScreen", "homeScreen", "lockAndHomeScreens"}] String wallpaperDisplayLocation;
    [Write, Description("A wallpaper image must be in either PNG or JPEG format. It requires a supervised device with iOS 8 or later version."), EmbeddedInstance("MSFT_mimeContent")] String wallpaperImage[];
    [Write, Description("Gets or sets a single sign-on extension profile."), EmbeddedInstance("MSFT_iosSingleSignOnExtension")] String iosSingleSignOnExtension;
};
